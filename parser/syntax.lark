
// Grammar of input files

?start: program

?constant: NUMBER
         | SYMBOL
         | constant BINOP constant
         | "(" constant ")"

?poly: constant
     | VARIABLE
     | poly BINOP_POLY poly
     | "(" poly ")"
     | poly POWER INT

?dist: DIST_NAME "(" [poly ("," poly)*] ")"

?assign: VARIABLE ("," VARIABLE)* ASSIGN assign_right ("," assign_right)*
?assign_right: poly | dist

?bexpr: TRUE | FALSE | poly COP poly | NOT bexpr | bexpr (AND | OR) bexpr

?statem: assign
       | if_statem

?if_statem: "if" bexpr ":" statems ("else if" bexpr ":" statems)* ["else" ":" statems] "end"
?statems: statem (_NL statems)*

?program: statems "while" bexpr ":" statems "end"

ASSIGN: "="

PLUS:  "+"
MINUS: "-"
POWER: "**"
MULT:  "*"
DIV:   "/"
BINOP: PLUS | MINUS | POWER | MULT | DIV
BINOP_POLY : PLUS | MINUS | POWER

TRUE:  "True"
FALSE: "False"
AND:   "and"
OR:    "or"
NOT:   "not"

EQ:  "=="
NEQ: "/="
LE:  "<"
GE:  ">"
LEQ: "<="
GEQ: ">="
COP: LEQ | GEQ | NEQ | EQ | LE | GE

VARIABLE: NAME
SYMBOL:   NAME
DIST_NAME : UCASE_LETTER ("_" | LETTER | DIGIT)*

%import common.WS
%import common.UCASE_LETTER
%import common.LETTER
%import common.DIGIT
%import common.CNAME -> NAME
%import common.SH_COMMENT -> COMMENT
%import common.SIGNED_NUMBER -> NUMBER
%import common.INT

_NL: (/\r?\n[\t ]*/)+

%ignore WS | COMMENT
