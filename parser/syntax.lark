
// Grammar of input files

?start: program

assign: VARIABLE ("," VARIABLE)* ASSIGN assign_right ("," assign_right)*
?assign_right: POLY | dist | categorical

dist: DIST_NAME "(" [DIST_PARAM ("," DIST_PARAM)*] ")"

categorical: POLY ("{" DIST_PARAM "}" POLY)+ ["{" DIST_PARAM "}"]

condition: literal | NOT condition | condition (AND | OR) condition | "(" condition ")"
?literal: POLY COP POLY

?statem: assign
       | if_statem

if_statem: "if" condition ":" statems ("else if" condition ":" statems)* ["else" ":" statems] "end"
?statems: statem (_NL statems)*

program: [typedefs] initial "while" loop_guard ":" loop_body "end"
initial: statems
loop_guard: condition
loop_body: statems

type: TYPE_NAME "(" [TYPE_PARAM ("," TYPE_PARAM)*] ")"
typedef: VARIABLE ":" type
typedefs: "types" typedef (_NL typedef)* "end"

ASSIGN: "="

AND: "&&"
OR: "||"
NOT: "!"

EQ:  "=="
NEQ: "/="
LE:  "<"
GE:  ">"
LEQ: "<="
GEQ: ">="
COP: LEQ | GEQ | NEQ | EQ | LE | GE

VARIABLE: NAME
TYPE_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*
TYPE_PARAM: /[^(){}A-Z"><=,&|!\n]+/
DIST_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*
// coarse definition of distribution parameters as they will be parsed by the individiual distribution
DIST_PARAM: /[^(){}A-Z"><=,&|!\n]+/

// coarse definition of polynomials as they will be parsed by the CAS
POLY: /[^{}A-Z":><=,&|!\n]+/

%import common.WS
%import common.UCASE_LETTER
%import common.LETTER
%import common.DIGIT
%import common.CNAME -> NAME
%import common.SH_COMMENT -> COMMENT
%import common.SIGNED_NUMBER -> NUMBER
%import common.INT

_NL: (/\r?\n[\t ]*/)+

%ignore WS | COMMENT
