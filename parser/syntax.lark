
// Grammar of input files

?start: program

assign: VARIABLE ("," VARIABLE)* ASSIGN assign_right ("," assign_right)*
?assign_right: arithm | dist | categorical

dist: DIST_NAME "(" [arithm ("," arithm)*] ")"

categorical: arithm ("{" arithm "}" arithm)+ ["{" arithm "}"]

condition: atom | NOT "(" condition ")" | condition (AND | OR) condition | "(" condition ")"
atom: arithm COP arithm

?statem: assign
       | if_statem

if_statem: "if" condition ":" statems ("else if" condition ":" statems)* ["else" ":" statems] "end"
statems: statem (_NL statems)*

program: [typedefs] initial "while" loop_guard ":" loop_body "end"
initial: [statems]
loop_guard: condition
loop_body: statems

type: TYPE_NAME "(" [arithm ("," arithm)*] ")"
typedef: VARIABLE ":" type
typedefs: "types" typedef (_NL typedef)* "end"

ASSIGN: "="

AND: "&&"
OR: "||"
NOT: "!"

EQ:  "=="
NEQ: "/="
LE:  "<"
GE:  ">"
LEQ: "<="
GEQ: ">="
COP: LEQ | GEQ | NEQ | EQ | LE | GE

VARIABLE: NAME
TYPE_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*
DIST_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*

arithm: ARITHM_ATOM
      | BOPEN arithm BCLOSE
      | arithm (PLUS | MINUS | MULT | POW) arithm
ARITHM_ATOM: ["+" | "-"] (NUMBER | LCASE_LETTER | "_")+
PLUS: "+"
MINUS: "-"
MULT: "*"
POW: "**"
BOPEN: "("
BCLOSE: ")"

%import common.WS
%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.LETTER
%import common.DIGIT
%import common.CNAME -> NAME
%import common.SH_COMMENT -> COMMENT
%import common.SIGNED_NUMBER
%import common.NUMBER

_NL: (/\r?\n[\t ]*/)+

%ignore WS | COMMENT
