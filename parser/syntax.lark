
// Grammar of input files

?start: program

dist: DIST_NAME "(" [DIST_PARAM ("," DIST_PARAM)*] ")"

?assign: VARIABLE ("," VARIABLE)* ASSIGN assign_right ("," assign_right)*
?assign_right: POLY | dist

?bexpr: TRUE | FALSE | POLY COP POLY | NOT bexpr | bexpr (AND | OR) bexpr

?statem: assign
       | if_statem

?if_statem: "if" bexpr ":" statems ("else if" bexpr ":" statems)* ["else" ":" statems] "end"
?statems: statem (_NL statems)*

?program: [typedefs] statems "while" bexpr ":" statems "end"

?typedef: VARIABLE ":" FINITE_TYPE
?typedefs: "types" typedef (_NL typedef)* "end"

FINITE_TYPE: "Finite" "(" NUMBER "," NUMBER ")"

ASSIGN: "="

TRUE:  "True"
FALSE: "False"
AND:   "and"
OR:    "or"
NOT:   "not"

EQ:  "=="
NEQ: "/="
LE:  "<"
GE:  ">"
LEQ: "<="
GEQ: ">="
COP: LEQ | GEQ | NEQ | EQ | LE | GE

VARIABLE: NAME
DIST_NAME: UCASE_LETTER ("_" | LETTER | DIGIT)*
// coarse definition of distribution parameters as they will be parsed by the individiual distribution
DIST_PARAM: /[^)(A-Z"><=,\n]+/

// coarse definition of polynomials as they will be parsed by the CAS
POLY: /[^A-Z":><=,\n]+/

%import common.WS
%import common.UCASE_LETTER
%import common.LETTER
%import common.DIGIT
%import common.CNAME -> NAME
%import common.SH_COMMENT -> COMMENT
%import common.SIGNED_NUMBER -> NUMBER
%import common.INT

_NL: (/\r?\n[\t ]*/)+

%ignore WS | COMMENT
